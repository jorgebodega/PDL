//// Gram?tica correspondiente al sintactico de la practica de PDL
//// El formato del fichero de entrada debe ajustarse a esta gramatica

//// Conjunto de simbolos terminales

Terminales = { id , { } ( ) function eof cr int bool chars if switch case : ; return write prompt = && ++ * > entero cadena True False var break lambda }

NoTerminales = { P1 P B T S S1 X L Q E E1 R R1 U U1 V V1 F H A K Z Z1 C W Y M N }

Axioma = P1

Producciones = {
P1 -> P
P -> B Z P //// P -> B Z P | F Z P | Z P | eof
P -> F Z P
P -> Z P
P -> eof
B -> var T id ////B -> var T id | if (E) S | switch (E) Z {Z W} | S
B -> if ( E ) S
B -> switch ( E ) Z { Z W }
B -> S
T -> int ////T -> int | bool | chars
T -> bool
T -> chars
S -> id S1 ////S -> id S1 | return X | write (E) | prompt (id)
S -> return X
S -> write ( E )
S -> prompt ( id )
S1 -> ( L ) ////S1 -> (L) | = E
S1 -> = E
X -> E ////X -> E | lambda
X -> lambda
L -> E Q ////L -> E Q | lambda
L -> lambda
Q -> , E Q ////Q -> , E Q | lambda
Q -> lambda
E -> R E1
E1 -> && R E1 ////E1-> && R E1 | lambda
E1 -> lambda
R -> U R1
R1 -> > U R1 ////R1 -> > U R1| lambda
R1 -> lambda
U -> V U1
U1 -> * V U1 ////U1-> * V U1 | lambda
U1 -> lambda
V -> id V1 ////V -> id V1 | (E) | entero | cadena | True | False
V -> ( E )
V -> entero
V -> cadena
V -> True
V -> False
V1 -> ( L ) ////V1-> (L) | ++ | lambda
V1 -> ++
V1 -> lambda
F -> function H id ( A ) Z { Z C }
H -> T ////H -> T | lambda
H -> lambda
A -> T id K ////A -> T id K | lambda
A -> lambda
K -> , T id K ////K -> , T id K | lambda
K -> lambda
Z -> cr Z1
Z1 -> cr Z1 ////Z1 -> cr Z1 | lambda
Z1 -> lambda
C -> B Z C ////C -> B Z C | lambda
C -> lambda
W -> case Y : S M Z N
Y -> entero
M -> ; break ////M -> ; break | cr break | lambda
M -> cr break
M -> lambda
N -> case Y : S M Z N ////N -> case Y : S M Z N | lambda
N -> lambda
}