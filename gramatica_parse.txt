Terminales = { id ; , { } ( ) for function int bool String if return print prompt == != = && + ++ - entero cadena True False var }

NoTerminales = { S0 S A A1 A2 A3 A4 D D1 D2 C F F1 F2 F3 S1 E E1 E2 G G1 H H1 I J Z Z1 }

Axioma = S0

Producciones = {
S0 -> S
S -> A ; S
S -> D ; S
S -> C S
S -> F S
S -> lambda
A -> id = E
A1 -> A
A1 -> lambda
A2 -> id A3
A2 -> lambda
A3 -> = E
A3 -> ++
A4 -> C A4
A4 -> D ; A4
A4 -> A ; A4
A4 -> lambda
D -> var D1 id
D1 -> int
D1 -> bool
D1 -> String
D2 -> D1
D2 -> lambda
C -> if ( E ) S1 ;
C -> for ( A1 ; E ; A2 ) { A4 }
C -> S1 ;
F -> function D2 id ( F1 ) { A4 }
F1 -> F2 F3
F2 -> D1 id
F2 -> lambda
F3 -> , F1
F3 -> lambda
S1 -> print ( E )
S1 -> prompt ( id )
S1 -> return E1
E -> G E2
E1 -> E
E1 -> lambda
E2 -> && E
E2 -> lambda
G -> H G1
G1 -> == G
G1 -> != G
G1 -> lambda
H -> I H1
H1 -> + H
H1 -> - H
H1 -> lambda
I -> id J
I -> ( E )
I -> entero
I -> cadena
I -> True
I -> False
J -> ++
J -> ( Z )
J -> lambda
Z -> id Z1
Z -> lambda
Z1 -> , id Z1
Z1 -> lambda
}